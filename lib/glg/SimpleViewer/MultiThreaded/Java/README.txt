This example provides a sample implementation of a simple GLG viewer
application that uses asynchronous data feed method via the use of a
data thread.

The data query occurs in a data thread where data values are queued
and then passed to the GUI on a timer, where accumulated data are
pushed to the graphics.

The viewer uses the GLG tags mechanism to animate the drawing. Tag
sources are assigned at design time and MUST MATCH the data source
strings specified in the application code in the GlgViewer.PushData()
method.

Dynamic data values for animation are supplied by the DataFeed object.
Simulated demo data are generated by DemoDataFeed class, and live
application data are generated by the LiveDataFeed class.  The
application developer should provide custom data acquisition code in
LiveDataFeed class to communicate with the application specific data
acquisition system.

DemoDataFeed and LiveDataFeed classes derive from the DataFeedBase
class, which contains methods for creating and stopping a data thread,
thread locking, storing data in a queue, as well as virtual methods
for data processing which should be overriven by the derived classes.

The application should provide a custom implementation of the data
structures for the received data, as well as data acquisition code in
LiveDataFeed.ProcessData().

DETAILS
  
A data thread is created in DataFeedBase.StartUpdates(). The data
processing occurs in ProcessData(), which obtains dynamic data values
and queues them in the AccumilatedData vector.

DataFeedBase.ProcessData() is a virtual method expected to be overriden by
each derived class:

  DemoDataFeed.ProcessData() generates simulated demo data.

  LiveDataFeed.ProcessData() should be implemented by the application developer 
      to obtain real-time data.

BaseData, GPSData and TelemetryData classes provide an example of the
custom data structures and should be customized by the application as
needed.

The code expects that tag sources defined in the loaded drawing MUST
MATCH data source strings specified in GlgViewer.PushData(). For
example, power and voltage values form the telemtry data structure
correspond to tag sources in the drawing "POWER" and "VOLTAGE"
respectively.

The drawing filename may be supplied as a command line argument, or
otherwise a default drawing name defined in the application code 
is loaded. In this example, the default drawing name is "tags_example.g".

TO USE LIVE DATA FOR ANIMATION:
*******************************

1. Provide custom implementation of the following modules and methods:
 
  Data structures, such as BaseData as a base class and classes derived from it.

  LiveDataFeed.Init()
  LiveDataFeed.Terminate()
  LiveDataFeed.ProcessData()
  LiveDataFeed.WriteDValue()
  LiveDataFeed.WriteSValue()
  GlgViewer.PushData()

2. Set RANDOM_DATA flag to false, or use -live-data command line option.

Supported command line options:

  -random-data  
        uses simulated demo data for animation

  -live-data
        uses live application data for animation
 
  <filename>
         specifies GLG drawing filename to be loaded and animated;
         if not defined, DefaultDrawingName is used.

