//////////////////////////////////////////////////////////////////////////////
// GLG RealTimeChartSimple example demonstrates how to use a GLG RealTimeChart 
// widget chart2.g.
//
// GetData() method supplies simulated data for animation. An application 
// should provide a custom implementation of this method to supply real-time
// application data to the chart.
//////////////////////////////////////////////////////////////////////////////

// Get a handle to the GLG Toolkit library.
var GLG = new GlgToolkit();

// Debugging aid: uncomment the next line to throw an exception on a GLG error.
GLG.ThrowExceptionOnError( true, true, true );

// Enable debuginng/diagnostics information.
const DEBUG = false;

/* Is set to true, simulated demo data will be used for animation.
   Set to false to enable live application data generated by
   GetAppData().
*/
const RANDOM_DATA = true;

var DrawingName = "chart2.g";         // GLG drawing filename. 
var ChartTitle = "RealTime Chart";    // Chart Title string.

// Defines number of lines in a chart.
const NUM_PLOTS = 3;

/* By default, use NUM_PLOTS constant to set number of plots in a chart. 
   Alternatively, NumPlots can be assigned to the number of plots defined 
   in the .g file, as shown in InitBeforeH().
*/
var NumPlots = NUM_PLOTS;

const UPDATE_INTERVAL = 100; 
var UpdateTimer = null; 

const TIME_SPAN = 60.;    // Time Span in sec.

// Low and High range of the incoming data values.
var Low = 0.; 
var High = 10.;

// YAxis levels (thresholds).
var Levels = [ 
    { level: 1.0, color: { r:0.0, g:0.0, b:1.0 } },
    { level: 9.0, color: { r:1.0, g:0.0, b:0.0 } }
];

var TimeSpan = TIME_SPAN; // Currently displayed Time axis span in sec.

// Top level viewport of the loaded drawing.   
var Viewport;

// Dynamically created array that stores plot objects in a chart.
var Plots = null;

var num_plots_drawing;    // Number of plots as defined in the drawing.

/* Used to store and pass information about one data sample.
   Set has_time_stamp=true to supply time_stamp explicitly. 
   Otherwise, the chart will automatically display a time stamp 
   using current time.
*/
var data_point =
{
    value : 0,
    value_valid : true,          
    time_stamp : 0,
    has_time_stamp : false
};

/* Coefficients for canvas resolution and text resolution. 
   These parameters will be adjusted for mobile devices with HiDPI displays
   in SetCanvasResolution().
*/
var CoordScale = 1;
var TextScale = 1;

var counter = 0;                       // Used for simulated data.

// Set initial size of the drawing.
SetDrawingSize( false );

/* Increase canvas resolution for mobile devices. Changes CoordScale and
   TextScale.
*/
SetCanvasResolution();

/* Load misc. assets such as GLG scrollbars. When assets are loaded, 
   LoadDrawing is invoked that loads a specified GLG drawing.
*/
LoadAssets( LoadDrawing, null );

function LoadDrawing()
{
    /* Load a drawing from the specified drawing file. 
       The LoadCB callback will be invoked when the drawing has been loaded.
    */
    GLG.LoadWidgetFromURL( DrawingName, null, LoadCB, /*user data*/ null );
}

//////////////////////////////////////////////////////////////////////////////
function LoadCB( /*GlgObject*/ drawing, /*Object*/ user_data, 
                 /*String*/ path )
{
    if( drawing == null )
    {
        AppAlert( "Can't load drawing, check console message for details." );
        return;
    }
    
    // Define the element in the HTML page to display the drawing.
    drawing.SetParentElement( "glg_area" );
    
    // Disable viewport border to use the border of the glg_area.
    drawing.SetDResource( "LineWidth", 0 );
    
    StartGlgChart( drawing );
}

//////////////////////////////////////////////////////////////////////////////
function StartGlgChart( /*GlgObject*/ drawing )
{
    Viewport = drawing;
    
    // Adjust the drawing for mobile devices if needed.
    AdjustForMobileDevices();
    
    // Initialization before hierarchy setup.
    InitBeforeH();

    // Setup object hierarchy in the drawing.
    Viewport.SetupHierarchy();

    // Initialization after hierarchy setup.
    InitAfterH();

    // Start dynamic updates.
    StartUpdateTimer();

    // Display the drawing in a web page.
    Viewport.Update();
}

//////////////////////////////////////////////////////////////////////////////
// Initialization before hierarchy setup.
//////////////////////////////////////////////////////////////////////////////
function InitBeforeH()
{
    // add Input callback to hadle user interaction.
    Viewport.AddListener( GLG.GlgCallbackType.INPUT_CB, InputCallback );

    // Retrieve the number of plots defined in the drawing.
    num_plots_drawing = 
        Viewport.GetDResource( "Chart/NumPlots" );
    
    /* Uncomment the line below to set NumPlots as defined in the drawing.
       Otherwise, NumPlots=NUM_PLOTS as defined in the code.
    */
    // NumPlots = num_plots_drawing;

    // Set number of plots as needed.
    Viewport.SetDResource( "Chart/NumPlots", NumPlots );
    
    // Set Chart title.
    Viewport.SetSResource( "Title/String", ChartTitle );

    // Set Time Span for the X axis.
    Viewport.SetDResource( "Chart/XAxis/Span", TimeSpan );
    
    /* Uncomment the line below to override XAxis label TimeFormat 
       defined in the drawing. "%T" displays time without a date.
    */
    //Viewport.SetSResource( "Chart/XAxis/TimeFormat", "%T" );

    /* Set tick intervals for the Time axis.
       Use positive values for absolute time interval, for example
       set major_interval = 10 for a major tick every 10 sec.
    */
    var major_interval = -6;     // 6 major intervals
    var minor_interval = -5;     // 5 minor intervals
    Viewport.SetDResource( "Chart/XAxis/MajorInterval", major_interval );
    Viewport.SetDResource( "Chart/XAxis/MinorInterval", minor_interval );
    
    /* Set data value range. Since the graph has one Y axis and
       common data range for the plots, Low/High data range is
       set on the YAxis level.
    */
    Viewport.SetDResource( "Chart/YAxis/Low", Low );
    Viewport.SetDResource( "Chart/YAxis/High", High );

    // Set number of level thresholds.
    var num_levels = Levels.length;
    Viewport.SetDResource( "Chart/NumLevels", num_levels );
}

//////////////////////////////////////////////////////////////////////////////
// Initialization after hierarchy setup.
//////////////////////////////////////////////////////////////////////////////
function InitAfterH()
{
    var i;

    /* Allocate Plots array and store object IDs for each plot. 
       Assign line color and/or line annotation as needed.
    */
    Plots = new Array( NumPlots );
    for( i=0; i<NumPlots; ++i )
    {
        Plots[i] = Viewport.GetNamedPlot( "Chart", "Plot#" + i ); 
    }
    
    /* For the existing plots, use color and line annotation setting 
       from the drawing; initialize new plots using random colors and 
       strings for demo purposes.
    */
    if( num_plots_drawing < NumPlots )
        for( i=num_plots_drawing; i < NumPlots; ++i )
    {
        // Using a random color for a demo.
        Plots[i].SetGResource( "EdgeColor", 
                               Math.random(), Math.random(), Math.random() );
        Plots[i].SetSResource( "Annotation", "Var" + i );
    }

    // Set YAxis levels.
    var num_levels = Viewport.GetDResource( "Chart/NumLevels" );
    if( num_levels <= Levels.length )
    {
        var res_name;
        for( var i=0; i<num_levels; ++i )
        {
            var res_name = "Chart/Levels/Level#" + i + "/";

            // Asssign level value.
            Viewport.SetDResource( res_name + "Level", Levels[i].level ); 

            // Assign level color. Use random colors for demo.
            Viewport.SetGResource( res_name + "EdgeColor", 
                  Levels[i].color.r, Levels[i].color.g, Levels[i].color.b ); 
        }
    }
}

//////////////////////////////////////////////////////////////////////////
function StartUpdateTimer()
{
   UpdateTimer = setTimeout( UpdateChart, UPDATE_INTERVAL );
}

//////////////////////////////////////////////////////////////////////////
function StopUpdateTimer()
{
   if( UpdateTimer != null )
   {
      clearTimeout( UpdateTimer );
      UpdateTimer = null;
   }
}

//////////////////////////////////////////////////////////////////////////////
// Animation: obtain a new data value for each plot and push it into graphics.
//////////////////////////////////////////////////////////////////////////////
function UpdateChart()
{  
    // Supply real-time data to update plot lines.
    for( var i=0; i<NumPlots; ++i )
    {
        GetData( i, data_point );
        PushPlotPoint( i, data_point );
    }

    // Refresh display.
    Viewport.Update();

    // Restart the update timer.
    StartUpdateTimer();
}

//////////////////////////////////////////////////////////////////////////////
function GetData( plot_index, data_point )
{
    if( RANDOM_DATA )
        // Use simulated demo data.
        GetDemoData( plot_index, data_point );
    else
        // Use application real-time data.
        GetAppData( plot_index, data_point );
}

//////////////////////////////////////////////////////////////////////////////
// Use simulated demo data for animation.
//////////////////////////////////////////////////////////////////////////////
function GetDemoData( plot_index, data_point )
{
    data_point.value = GetDemoValue( plot_index );
   
    /* If data_point.has_time_stamp=true, supply time stamp explicitly
       using current time for demo. 
       If data_point.has_time_stamp=false, the chart will automatically 
       display current time as an XAxis label. 
    */
    if( data_point.has_time_stamp )
        data_point.time_stamp = GetCurrTime();
   
   /* For demo purposes, show all data points as valid.
      The application may set value_valid=false for a data sample with an 
      invalid value to show a hole in the chart for that data sample.
   */   
   data_point.value_valid = true;
}

//////////////////////////////////////////////////////////////////////////////
// Place custom code here to query real-time data for the given plot index.
//////////////////////////////////////////////////////////////////////////////
function GetAppData( plot_index, data_point )
{
    /*
      data_point.value = 
      data_point.time_stamp =
      data_point.has_time_stamp =
      data_point.value_valid = 
    */   
}

//////////////////////////////////////////////////////////////////////////////
// Push new plot data sample for a given plot index into graphics.
//////////////////////////////////////////////////////////////////////////////
function PushPlotPoint( plot_index, data_point )
{
    var plot = Plots[ plot_index ];
    
    // Supply plot value for the chart via ValueEntryPoint.
    plot.SetDResource( "ValueEntryPoint", data_point.value );
    
    if( data_point.has_time_stamp )
    {
        /* Supply an optional time stamp. If not supplied, the chart will 
           automatically generate a time stamp using current time. 
        */
        plot.SetDResource( "TimeEntryPoint", data_point.time_stamp );
    }
    
    if( !data_point.value_valid )
    {	   
        /* If the data point is not valid, set ValidEntryPoint resource to 
           display a hole for an invalid data point. If the point is valid,
           it is automatically set to 1.0 by the chart.
        */
        plot.SetDResource( "ValidEntryPoint", 0.0 );
    }
}

//////////////////////////////////////////////////////////////////////////////
// Handle user interaction as needed.
//////////////////////////////////////////////////////////////////////////////
function InputCallback( viewport, message_obj )
{
    var origin = message_obj.GetSResource( "Origin" );
    var format = message_obj.GetSResource( "Format" );
    var action = message_obj.GetSResource( "Action" );
    
    if( format == "Button" )
    {	 
       if( action !="Activate" &&         /* Not a push button */
           action != "ValueChanged" )     /* Not a toggle button */
           return;
        
        Viewport.Update();  //format = "Button"
    }
}

//////////////////////////////////////////////////////////////////////////////
// Change drawing size while maintaining width/height aspect ratio.
//////////////////////////////////////////////////////////////////////////////
function SetDrawingSize( next_size )
{
    const ASPECT_RATIO = 700 / 540;
    
    const MIN_WIDTH = 500;
    const MAX_WIDTH = 900;
    const SCROLLBAR_WIDTH = 15;
    
    if( SetDrawingSize.size_index == undefined )   // first time
    {
        SetDrawingSize.size_index = 0;
        
        SetDrawingSize.small_sizes       = [ 1, 1.5,  2.,   2.5 ];
        SetDrawingSize.medium_sizes      = [ 1, 0.75, 1.25, 1.5 ];
        SetDrawingSize.large_sizes       = [ 1, 0.6,  1.25, 1.5 ];
        SetDrawingSize.num_sizes = SetDrawingSize.small_sizes.length;
        SetDrawingSize.is_mobile = ( screen.width <= 760 );
        
        window.addEventListener( "resize", ()=>{ SetDrawingSize( false ) } );
    }
    else if( next_size )
    {
        ++SetDrawingSize.size_index;
        SetDrawingSize.size_index %= SetDrawingSize.num_sizes;
    }
    
    var drawing_area = document.getElementById( "glg_area" );
    if( SetDrawingSize.is_mobile )
    {
        /* Mobile devices use constant device-width, adjust only the height 
           of the drawing to keep the aspect ratio.
        */
        drawing_area.style.height =
            "" + Math.trunc( drawing_area.clientWidth / ASPECT_RATIO ) + "px";
   }
   else   /* Desktop */
   {
       var span = document.body.clientWidth; 
       span -= SCROLLBAR_WIDTH;
       
       var start_width;
       if( span < MIN_WIDTH )
           start_width = MIN_WIDTH;
       else if( span > MAX_WIDTH )
           start_width = MAX_WIDTH;
       else
           start_width = span;
       
       var size_array;
       if( span < 600 )
           size_array = SetDrawingSize.small_sizes;
       else if( span < 800 )
           size_array = SetDrawingSize.medium_sizes;
       else
           size_array = SetDrawingSize.large_sizes;
       
       var size_coeff = size_array[ SetDrawingSize.size_index ];
       var width = Math.trunc( Math.max( start_width * size_coeff, MIN_WIDTH ) );
       drawing_area.style.width = "" + width + "px";
       drawing_area.style.height = 
           "" + Math.trunc( width / ASPECT_RATIO ) + "px";
   }
}

//////////////////////////////////////////////////////////////////////////////
// Increases canvas resolution for mobile devices with HiDPI displays.
//////////////////////////////////////////////////////////////////////////////
function SetCanvasResolution()
{
    // Set canvas resolution only for mobile devices with devicePixelRatio != 1.
    if( window.devicePixelRatio == 1. || !SetDrawingSize.is_mobile )
        return;   // Use coord scale = 1.0 for desktop.

    /* The first parameter defines canvas coordinate scaling with values 
       between 1 and devicePixelRatio. Values greater than 1 increase 
       canvas resolution and result in sharper rendering. The value of 
       devicePixelRatio may be used for very crisp rendering with very thin 
       lines.
       
       Canvas scale > 1 makes text smaller, and the second parameter defines
       the text scaling factor used to increase text size.
       
       The third parameter defines the scaling factor that is used to
       scale down text in native widgets (such as native buttons, toggles, etc.)
       to match the scale of the drawing.
    */
    CoordScale = 2.0;
    TextScale = 1.5;
    var native_widget_text_scale = 0.6;
    GLG.SetCanvasScale( CoordScale, TextScale, native_widget_text_scale );
    
    // Mobile devices use fixed device-width: disable Change Drawing Size button.
    var change_size_button = document.getElementById( "change_size" );
    if( change_size_button != null )
        change_size_button.parentNode.removeChild( change_size_button );
}

//////////////////////////////////////////////////////////////////////////////
// Adjust GLG object geometry for mobile devices if needed, using 
// special properties defined in the object.
//////////////////////////////////////////////////////////////////////////////
function AdjustForMobileDevices()
{
    if( CoordScale == 1.0 ) // Desktop, no adjustements needed.
        return;
    
    Viewport.SetDResource( "Chart/OffsetCoeffForMobile", TextScale );
}

//////////////////////////////////////////////////////////////////////////////
// Loads any assets required by the application and invokes the specified
// callback when done.
// Alternatively, the application drawing can be loaded as an asset here
// as well, so that it starts loading without waiting for the other assets 
// to finish loading.
//////////////////////////////////////////////////////////////////////////////
function LoadAssets( callback, user_data )
{
    /* HTML5 doesn't provide a scrollbar input element (only a range input 
       html element is available). This application needs to load GLG scrollbars
       used for integrated chart scrolling. For each loaded scrollbar, the 
       AssetLoaded callback is invoked with the supplied data array parameter.
    */    
    GLG.LoadWidgetFromURL( "scrollbar_h.g", null, AssetLoaded,
                           { name: "scrollbar_h", callback: callback,
                             user_data: user_data } );
    GLG.LoadWidgetFromURL( "scrollbar_v.g", null, AssetLoaded,
                           { name: "scrollbar_v", callback: callback,
                             user_data: user_data } );
}

//////////////////////////////////////////////////////////////////////////////
function AssetLoaded( glg_object, data, path )
{
    if( data.name == "scrollbar_h" )
    {
        if( glg_object != null )
            glg_object.SetResourceObject( "$config/GlgHScrollbar", glg_object );
    }
    else if( data.name == "scrollbar_v" )
    {
        if( glg_object != null )
            glg_object.SetResourceObject( "$config/GlgVScrollbar", glg_object );
    }
    else
        console.error( "Unexpected asset name" );

    /* Define an internal variable to keep the number of loaded assets. */
    if( AssetLoaded.num_loaded == undefined )
        AssetLoaded.num_loaded = 1;
    else
        ++AssetLoaded.num_loaded;
    
    /* Invoke the callback (the second parameter of the data array) after all
       assets have been loaded.
    */
    if( AssetLoaded.num_loaded == 2 )
        data.callback( data.user_data );
}

//////////////////////////////////////////////////////////////////////////
function GetCurrTime()
{
   return Date.now() / 1000;    // seconds
}   

//////////////////////////////////////////////////////////////////////////////
// Returns simulated data value.
//////////////////////////////////////////////////////////////////////////////
function GetDemoValue( plot_index )
{
    var half_amplitude = ( High - Low ) / 2.0;
    var center = Low + half_amplitude;
    var period = 100.0 * ( 1.0 + plot_index * 2.0 );
    var alpha = 2.0 * Math.PI * counter / period;
    
    var value = center + 
        half_amplitude * Math.sin( alpha ) * Math.sin( alpha / 30.0 );
    
    counter++;
    return value;
}

//////////////////////////////////////////////////////////////////////////////
function Debug( message )
{
    if( DEBUG )
        console.log( message );
}

//////////////////////////////////////////////////////////////////////////////
function AppError( message )
{
    console.error( message );
}

//////////////////////////////////////////////////////////////////////////////
function AppAlert( message )
{
    window.alert( message );
}
