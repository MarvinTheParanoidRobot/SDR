#include <stdio.h>
#include <stdlib.h> 

// Set this defined constant to be 1 to use motif.
#define USE_MOTIF              0

#include <X11/Intrinsic.h>
#include <X11/StringDefs.h>
#include <X11/Shell.h>
#if USE_MOTIF
#include <Xm/Form.h>
#endif

#include "GlgClass.h"

// Set this defined constant to be 1 to use code generated by the
// GLG Code Generation Utility.
//
#define USE_GENERATED_CODE     0

#define WIDTH     800
#define HEIGHT    600

class GraphExample : public GlgWrapperC
{
 private:
   // Disallow assigments and copying a widget
   GraphExample& operator= ( const GraphExample& object );
   GraphExample( GraphExample& object );

 public:
   GraphExample( void );
   virtual ~GraphExample( void );

   // Override to supply custom Input and Selection methods
   void Input( GlgObjectC& callback_viewport, GlgObjectC& message );
};

// Function prototypes
void UpdateGraph( GraphExample*, XtIntervalId* );
double GetData( void );

// The name of the graph's selected bar to drag with the mouse.
unsigned int TimeInterval = 500;

XtAppContext AppContext;

#if USE_GENERATED_CODE
// The following symbols should be defined in the file generated by the
// GLG Code Generation Utility.
//
extern long GraphData[];
extern long GraphDataSize;
#endif

/////////////////////////////////////////////////////////////////////////////
// This program illustrates using most of the GLG Widget's features with
// X Windows C++ API. The program creates a GLG widget with a bar graph in it
// and fills it with random data, using resources to change graph's
// attributes. 
// 
// The widget's Input callback is used to handle the user feedback
// via the use of a Custom MouseClickEvent added to the DataSample
// object in the Builder.
//
// When a user selects a particular bar (DataSample) with the
// mouse, the DataSample's name and value get displayed in a 
// text object.
//
// In order to use this program template with a diffrent drawing file,
// replace "bar_graph.g" with the name of your drawing file and adjust 
// resource names.
/////////////////////////////////////////////////////////////////////////////
int main( int argc, char *argv[] )
{
   Display * display;
   Widget shell, form;
   Cardinal ac;
   Arg al[20];
   GraphExample graph_example;
   
   // Initialize X Toolkit and create an application context.
   XtToolkitInitialize();
   AppContext = XtCreateApplicationContext();
   
   // Open a display connection.
   display =
     XtOpenDisplay( AppContext, 0, "GlgExample", "Glg", 0, 0, &argc, argv );
   
   // Create a shell.
   ac = 0;
   XtSetArg( al[ac], XtNbaseWidth, WIDTH ); ac++;
   XtSetArg( al[ac], XtNbaseHeight, HEIGHT ); ac++;
   XtSetArg( al[ac], XtNwidth, WIDTH ); ac++;
   XtSetArg( al[ac], XtNheight, HEIGHT ); ac++;
   XtSetArg( al[ac], XtNminWidth, 10 ); ac++;
   XtSetArg( al[ac], XtNminHeight, 10 ); ac++;
   XtSetArg( al[ac], XtNallowShellResize, True ); ac++;
   XtSetArg( al[ac], XtNinput, TRUE ); ac++;
   shell =
     XtAppCreateShell( "GlgExample", "Glg", applicationShellWidgetClass,
		      display, al, ac );
   
#if USE_MOTIF
   // Create a motif form widget to hold the GlgWrappper widget.
   ac = 0;
   XtSetArg( al[ac], XmNresizable, TRUE ); ac++;
   form = XmCreateForm( shell, "form", al, ac );
   XtManageChild( form );
#else
   // If not using motif, attach the GlgWrapper directly to the shell.
   form = shell;
#endif

   // Create a GLG widget either from a file or a generated image.
#if USE_GENERATED_CODE
   // Use a generated drawing image.
   graph_example.Create( GraphData, GraphDataSize, form );
#else
   // Take a drawing from the file.
   graph_example.Create( "bar_graph.g", form );
#endif
   
   // Set some optional resources for the initial appearance of the widget.
   // Doing it before realizing the widget allows setting resources before
   // the drawing hierarchy is created.
   // To avoid setting these resources every time on start up, use the
   // Editor to save the customized version of the widget with the desired
   // values of resources.

   // Set the background color of the widget to be white.
   //
   graph_example.SetXtResource( XtNglgVResource0, "FillColor g 1. 1. 1." );
   
   // Set the number of datasamples in the graph to 30.
   graph_example.SetXtResource( XtNglgHResource0, "DataGroup/Factor d 30" );
   
   // Set the number of X labels and minor ticks
   graph_example.SetXtResource( XtNglgHResource1, "XLabelGroup/Factor d 6" );
   graph_example.SetXtResource( XtNglgHResource2,
				"XLabelGroup/MinorFactor d 5" );

   // Set the initial value of all bars to be 0 on the initial appearance.
   graph_example.SetXtResource( XtNglgHResource3,
			       "DataGroup/DataSample/Value d 0." );
   
   // Set all labels to display empty strings on the initial appearance.
   graph_example.SetXtResource( XtNglgHResource4,
			       "XLabelGroup/XLabel/String s" );
   
   // Set the fill color of all bars of a bar graph to be green by
   // setting the color of a template datasample.
   //
   graph_example.SetXtResource( XtNglgHResource5,
			       "DataGroup/DataSample/FillColor g 0. 1. 0." );


   // Set the colors of individual bars to be independent.
   graph_example.SetXtResource( XtNglgHResource6,
			       "DataGroup/DataSample/FillColor/Global d 0." );

   // Make  the SelectedBarLabel object invisible.
   graph_example.SetXtResource( XtNglgHResource7,
				"SelectedBarLabel/Visibility d 0.0" );
   
   // Set the colors of the second bar to blue. This resource is accessible
   // only after the hierarchy has been setup, so use V resource.
   graph_example.SetXtResource( XtNglgVResource1,
			       "DataGroup/DataSample2/FillColor g 0. 0. 1." );

   
#if USE_MOTIF
   // If using motif, attach the GlgWrapper to a form.
   ac = 0;
   XtSetArg( al[ac], XmNleftAttachment, XmATTACH_FORM ); ac++;
   XtSetArg( al[ac], XmNrightAttachment, XmATTACH_FORM ); ac++;
   XtSetArg( al[ac], XmNtopAttachment, XmATTACH_FORM ); ac++;
   XtSetArg( al[ac], XmNbottomAttachment, XmATTACH_FORM ); ac++;
   XtSetValues( graph_example.GetWidget(), al, ac );
#endif
   
   // Add initialization and selection callbacks, if any.
   graph_example.EnableCallback( GLG_INPUT_CB );
      
   XtRealizeWidget( shell );

   graph_example.GetViewport();   // Get the viewport object after realizing.
   
   // Add a work procedure to update the graph.
   XtAppAddTimeOut( AppContext, TimeInterval,
		    (XtTimerCallbackProc)UpdateGraph, 
		    (XtPointer)&graph_example );
   
   XtAppMainLoop( AppContext );
}

/////////////////////////////////////////////////////////////////////////////
// Pushes the next data and label values and updates the graph.
/////////////////////////////////////////////////////////////////////////////
void UpdateGraph( GraphExample * graph_example, XtIntervalId *timer_id )
{
   static long iteration_counter = 2; // A counter used to generate labels.
   char * label;

   // Push the next data value, let the graph handle scrolling.
   graph_example->SetResource( "DataGroup/EntryPoint", GetData() );

   // Generate the next label to use.
   label = GlgCreateIndexedName( "Value ", iteration_counter );
   ++iteration_counter;

   // Push the next label. The graph handles labels scrolling.
   // To set labels directly, use "XLabelGroup/Xlabel<n>/String" as a
   // name of a resource, where <n> is the sequential zero-based label
   // index. In this case you will be responsible for handling label
   // scrolling.
   //
   graph_example->SetResource( "XLabelGroup/EntryPoint", label );

   // Store the label in a datasample as well to display it when 
   // the datasample is selected. The stock graph was moditied to add 
   // this additional entry point.
   graph_example->SetResource( "DataGroup/SampleNameEntryPoint", label );

   GlgFree( label );           // Free the label.

   graph_example->Update();    // Makes changes visible.

   /* Reinstall the timeout to continue updating */
   XtAppAddTimeOut( AppContext, TimeInterval,
		    (XtTimerCallbackProc)UpdateGraph, 
		    (XtPointer)graph_example );
}

/////////////////////////////////////////////////////////////////////////////
// Returns a random number in the [0;1] range. Use a real source of data
// instead of this function.
/////////////////////////////////////////////////////////////////////////////
double GetData()
{
   return GlgRand( 0., 1. );
}

/////////////////////////////////////////////////////////////////////////////
// In this example, Input callback is used to process Custom MouseClick 
// events for the DataSamples. When the user selects a DataSample with 
// the mouse, its value will be displayed in the text object named 
// SelectedBarLabel.
/////////////////////////////////////////////////////////////////////////////
void GraphExample::Input( GlgObjectC& viewport, GlgObjectC& message )
{
   double bar_value;
   CONST char
      * format,
      * action,
      * sample_name,
      * event_label;

   message.GetResource( "Format", &format );
   message.GetResource( "Action", &action );

   // Handle window closing. May use viewport's name.
   if( strcmp( format, "Window" ) == 0 &&
      strcmp( action, "DeleteWindow" ) == 0 )
     exit( 0 );

   // Process CustomEvents
   if( strcmp( format, "CustomEvent" ) == 0 &&
       strcmp( action, "MouseClick" ) == 0 )
   {
      message.GetResource( "EventLabel", &event_label );
      if( strcmp( event_label, "BarSelected" ) == 0 ) //Bar selected
      {
	 // The DataSample was selected. Retrieve its value and sample name.
         // The stock graph was modified by adding a SampleName custom propery
         // to the graph's datasample. If a stock graph is used, use the 
         // Object/Name resource instead of Object/SampleName to retrieve 
         // the name of the datasample object instead of the stored label.
         //
	 message.GetResource( "Object/Value", &bar_value );
	 message.GetResource( "Object/SampleName", &sample_name );
	 
	 // Display the bar name and value in a text object 
	 // named "SelectedBarLabel".
	 viewport.SetResource( "SelectedBarLabel/DataSampleValue", 
			       bar_value );
	 viewport.SetResource( "SelectedBarLabel/DataSampleName", 
			       sample_name );
	 
	 // Make SelectedBarLabel object visible.
	 viewport.SetResource( "SelectedBarLabel/Visibility", 
			       1.0 );
      }
   }
   viewport.Update(); //update the display
}

GraphExample::GraphExample( void )
{
}

GraphExample::~GraphExample( void )
{
}
