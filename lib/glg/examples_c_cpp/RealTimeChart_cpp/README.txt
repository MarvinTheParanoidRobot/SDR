This example demonstrates how to display and update a GLG realtime
stripchart widget and use its integrated interactive behavior. The
example supports both horizontal and vertical stripchart.

The example is written using GLG Intermediate API. 

To compile the example, define the GLG_CPP_INTERMEDIATE_API preprocessor
definition as described below.

On Linux/Unix:

    Use compilation option: -D GLG_CPP_INTERMEDIATE_API

On Windows: 

    Add GLG_CPP_INTERMEDIATE_API to the Preprocessor Definitions in the 
    Visual Studio project.

The example supports the following command line options:
    -random-data         (use simulated demo data)
    -live-data           (use live application date from LiveDataFeed)
    drawing_name         (specifies GLG drawing to be loaded an animated

By default, the example loads stripchart.g drawing containing a
horizontal stripchart. To use a vertical stripchart, specify the
drawing name "stripchart_vertical.g" as command line argument.

The example uses simulated data generated by DemoDataFeed. 
To use live data for animation:

  - Set RANDOM_DATA=false in GlgRealTimeChartG.cpp, 
    or use command line option -live-data.

  - Provide a custom implementation of LiveDataFeed class.

DETAILS

GlgChart class is derived from GlgObjectC and encapsulates methods for
initializing the chart, updating the chart with data and handling user
interaction. 

GlgChart loads and displays a drawing passed to the LoadWidget()
method. The default drawing name is stripchart.g. A custom drawing
name can be specified as a comamnd line argument. It is expected that
the drawing includes a viewport named ChartViewport, as well as
interface widgets allowing to scroll and zoom the chart. ChartViewport
contains the Chart object which plots the chart data.
  
The chart is initilaized in the GlgChart::Init().

The chart is animated with data supplied by the DataFeed object using
a timer. The demo uses DemoDataFeed to generate simulated data. The
application should provide a custom data feed implementation via
LiveDataFeed class. Both DemoDataFeed and LiveDataFeed extend
DataFeedBase class included in the example.

The X axis labels display current date and time using the time format
defined in the drawing. Data points in the chart are positioned
according to their time stamp. An application may provide a time stamp
for each data point, otherwise the chart will automatically use
current time for the time stamp.

To supply a time stamp explicitly, set GlgChart::SUPPLY_TIME_STAMP = true.
 




