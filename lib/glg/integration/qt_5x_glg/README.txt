QT-GLG INTEGRATION EXAMPLE

OVERVIEW

This example demonstrates how to use a GLG QT Widget for embedding GLG 
functionality in a QT application. The widget loads a GLG drawings
containing a panel of interactive dials, gauges and custom toggles. 
GLG API is then used to update the objects in the drawing with live data 
and handle user interaction with the objects in the drawing.

The GLG drawing was created using the GLG Buidler and contains samples
of the available GLG dials and gauges.

USING GLG C OR C++ API TO ACCESS OBJECTS IN THE DRAWING

The example uses a GLG C API to access the objects inside the GLG drawing. 
The viewport variable of the QGlgWidget class holds the object ID of the
loaded drawing. The GLG API provides a way to access any graphical object
defined in the drawing, change its attributes, supply dynamic data and
handle user interaction with the objects in the drawing (selection, user input,
mouse over, etc.).

Alternatively, a GLG C++ API can be used, in which case the type of the 
viewport variable in the QGlgWidget class will be of a GlgObjectC, instead 
of GlgObject. The GlgObjectC class is defined in the GlgClass.cpp file 
that provides GLG C++ bindings and located in the cpp directory of the GLG
installation.

COMPILATION NOTES

COMPILING ON UNIX/LINUX

The Qt project file for the integration example is named qt_glg.pro

To create Makefile from project file, correct the GLG path in the project 
file, then run: 

  qmake -makefile qt_glg.pro

To compile, run:

  make

COMPILING ON WINDOWS

The Qt project file for the integration example is named qt_glg_win.pro

To create Makefile.Release amd Makefile.debug makefiles from project file,
correct the GLG path in the .pro project file, then run: 

  qmake -makefile qt_glg_win.pro

To compile, run:

  nmake -f Makefile.release

CREATING PROJECT FILES FROM SCRATCH ON UNIX/LINUX

To create Qt project file named qt_glg.pro, run:

  qmake -project qt_glg.pro

Add the following to the .pro file, changing the GLG path as required:

  INCLUDEPATH += . /usr/local/glg/include
  LIBS = -L/usr/local/glg/lib -lglg_x11 -lglg_map_stub \
         -lXt -lX11 -ljpeg -lpng -lz -ldl 

OPENGL NOTES FOR UNIX/LINUX

If OpenGL warnings are generated by GLG at run-time due to not found or
missing libGLU library, the GLG OpenGL driver can be disabled by using 
one of the following options:

   - using the -glg-disable-opengl command line option

   - setting the GlgOpenGLMode global configuration resource to 0 
     in the application code after instantiating the first QGlgWidget 
     as follows:
       GlgSetDResource( NULL, "$config/GlgOpenGLMode", 0. );

   - setting GLG_OPENGL_MODE environment variable to False.

CREATING PROJECT FILES FROM SCRATCH ON WINDOWS

To create Qt project file named qt_glg_win.pro, run: 

  qmake -project qt_glg_win.pro

Add the following to the .pro file, changing the GLG path and the GLG library
as required:

  DEFINES = _WINDOWS
  INCLUDEPATH += . C:\Glg\include
  LIBS = C:\Glg\lib\Glg.lib
