using System;
using GenLogic;

// Datasource contains one or more values and a time stamp.
class GlgDemoDataSource
{
   // Inner class, updates a single double value
   class GlgDemoDataValue
   {
      // Data range
      double low;
      double high;

      public double value;    // Current value.
      int direction;   // Last increment direction: 1 or -1

      /////////////////////////////////////////////////////////////////////
      public GlgDemoDataValue( double low_p, double high_p )
      {
         low = low_p;
         high = high_p;

         if( low >= high )   // Use defaults.
         {
            low = 0.0;
            high = 100.0;
         }

         // Starting value.
         value = low + GlgObject.Rand( 0.2, 0.8 ) * ( high - low );

         // Initial direction.
         direction = ( GlgObject.Rand( 0.0, 1.0 ) > 0.5 ? 1 : -1 );
      }

      /////////////////////////////////////////////////////////////////////
      public void GetNewValue()
      {
         bool change_direction;

         double increment = GlgObject.Rand( 0.02, 0.15 ) * ( high - low );

         // Change direction on every 5th iteractions, on average.
         change_direction = ( GlgObject.Rand( 0.0, 5.0 ) < 1.0 );
         if( change_direction )
           direction *= -1;
         
         double new_value = value + increment * (double) direction;

         if( new_value > high || new_value < low )
         {
            direction *= -1;    // Got to the min/max: change direction.
            new_value = value + increment * (double) direction;
         }

         value = new_value;
      }
   }

   DateTime last_time = DateTime.Now.AddHours( -1.0 );

   // Used for graph labels.
   public int hour;
   public int min;
   public int sec;

   int update_interval;
   int num_values;    // Number of values, >1 for multi-line graph.

   /* Array of values, may contain more than one value for 
      multi-value datasources.
   */
   GlgDemoDataValue[] value_array;

   //////////////////////////////////////////////////////////////////////////
   public GlgDemoDataSource( double low, double high, int num_values_p,
                             int update_interval_p )
   {      
      num_values = num_values_p;

      value_array = new GlgDemoDataValue[ num_values ];
      for( int i=0; i<num_values; ++i )
        value_array[ i ] = new GlgDemoDataValue( low, high );

      update_interval = update_interval_p;
      if( update_interval < 0 )
        update_interval = 1000;   // Update once a second by default.
   }

   //////////////////////////////////////////////////////////////////////////
   // Updates simulated data. An application would query its data from
   // any application-specific datasource.
   //////////////////////////////////////////////////////////////////////////
   public bool UpdateData()
   {
      if( update_interval != 0 )
      {
         DateTime curr_time = DateTime.Now;

         /* Update simulation data only as often as defined by 
            update_interval.
         */
         TimeSpan difference = curr_time.Subtract( last_time );
         if( difference.TotalMilliseconds < update_interval )
           return false;
         
         hour = curr_time.Hour;
         min = curr_time.Minute;
         sec = curr_time.Second;      
         
         last_time = curr_time;
      }

      for( int i=0; i<num_values; ++i )
        value_array[i].GetNewValue();

      return true;   // Got a new data value.
   }

   //////////////////////////////////////////////////////////////////////////
   public double GetValue()
   {
      return value_array[0].value;
   }

   //////////////////////////////////////////////////////////////////////////
   public double GetValue( int index )
   {
      return value_array[ index ].value;
   }
}
