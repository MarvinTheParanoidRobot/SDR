using System;
using System.Globalization;
using System.Collections.Generic;
using System.Web;
using System.Drawing.Imaging;
using GenLogic;

namespace SimpleViewerHandler
{
   public class SimpleViewerHandler : IHttpHandler, HandlerErrorInterface
   {
      private static Object init_lock = new Object();
      private static GlgHttpRequestProcessor request_processor = null;

      // Using random demo data, change to false to use a custom data source.
      static bool RANDOM_DATA = true;

      /* Number of cached recent drawings. Cached drawings are kept in memory
         and do not require reloading to process a request. When this number
         is exceeded, the oldest drawing is discarded to free space for a new
         drawing.
      */
      const int MAX_NUM_DRAWINGS = 20;

      const String default_drawing_name = "plant_ajax.g";
      static String app_path = "SimpleViewerHandler";

      static GlgObject DrawingArray;

      // Used for the popup dialog updates.
      static GlgTagRecord tag_record = new GlgTagRecord();

      /* DataFeed object is used to supply data for animation:
         DemoDataFeed or LiveDataFeed.
      */
      static DataFeedInterface DataFeed;

      // Stores information about a drawing and its list of tags.
      internal class DrawingData
      {
         internal String drawing_name;
         internal GlgObject viewport;
         internal List<GlgTagRecord> tag_records;
         internal int num_tags;
         
         internal DrawingData( String drawing_name, GlgObject viewport, 
                               List<GlgTagRecord> tag_records )
         {
            this.drawing_name = drawing_name;
            this.viewport = viewport;
            this.tag_records = tag_records;
            if( tag_records == null )
              this.num_tags = 0;
            else
              this.num_tags = tag_records.Count;
         }
      }
 
      ///////////////////////////////////////////////////////////////////
      public bool IsReusable
      {
         get { return false; }
      }

      ///////////////////////////////////////////////////////////////////
      public void ProcessRequest( HttpContext context )
      {
         lock( init_lock )
         {
            /* First time only: create GlgHttpRequestProcessor that properly
               handles ASP.NET synchronization context. ProcessRequestData is
               registered as a custom application-specific method used by
               the request processor to process HTTP requests.
            */
            if( request_processor == null )
              request_processor = 
                new GlgHttpRequestProcessor( ProcessRequestData );
         }

         /* Request processor will invoke ProcessRequestData method to
            handle application-specific logic.
         */
         GlgHttpRequestData request_data = 
           request_processor.ProcessRequest( context );

         /* Returned data contains an image or HTML text response.
            If there were request processing errors, the errors will be 
            reported in the HTML output and returned data will be null.
         */
         if( request_data != null )
         {
            if( request_data.image != null )
            {
               // Save image.
               context.Response.ContentType = "image/png";
               request_data.image.Save( context.Response.OutputStream, 
                                        ImageFormat.Png );
            }
            else if( request_data.html_response != null )
              // Write html response for a tooltip, selection or dialog data.
              context.Response.Write( request_data.html_response );
            else
              context.Response.Write( "Error: Unexpected response.<br>");
         }
      }

      ///////////////////////////////////////////////////////////////////
      // A custom method invoked to process HTTP context.
      // 
      // The HTTP context is passed in the request_data.context field.
      // The generated image is assigned to the data.image field.
      // The data.custom_data field may be used to pass additional 
      //     custom data to the ProcessRequest method.
      //
      // The GlgObject.Error method may be used in the code to flag errors.
      // Any errors will be reported in the generated HTML by the default
      // GLG error handler. 
      //
      // A custom GLG error handler may be set using the 
      // GlgObject.SetErrorHandler method inside this method. 
      // The request_data.got_errors field may be set to true to flag errors 
      // in case if a custom error handler is used.
      ///////////////////////////////////////////////////////////////////
      void ProcessRequestData( GlgHttpRequestData request_data )
      {
         HttpRequest request = request_data.context.Request;

         /* DataFeed object is used to supply data for animation:
            DemoDataFeed or LiveDataFeed.
         */
         if( DataFeed == null )
         {
            if( RANDOM_DATA )
              DataFeed = new DemoDataFeed( this );
            else
              DataFeed = new LiveDataFeed( this );
         }
         
         String action = GetStringParameter( request, "action", "GetImage" );
         if( action.Equals( "GetDialogData" ) )
         {
            // Simply return requested dialog data: no drawing required.
            ProcessDialogData( request_data );
            return;
         }

         /* The rest of actions (GetImage, ProcessEvent) require a drawing -
            load it (if first time) and update with data.
         */

         // Get requested width/height of the image: need for all other actions.
         int width = GetIntegerParameter( request, "width", 500 );
         int height = GetIntegerParameter( request, "height", 400 );
         
         // Limit max. size to avoid running out of heap space creating an image.
         if( width > 1000 ) width = 1000;       
         if( height > 1000 ) height = 1000;       

         String drawing_name = 
           GetStringParameter( request, "drawing", default_drawing_name );

         /* Load the drawing just once and share it between all instances of
            this HTTP handler.
         */
         DrawingData drawing = GetDrawing( drawing_name );

         GlgObject viewport;
         if( drawing == null )
         {
            GlgObject.Init();

            String path;
            String dir = request_data.context.Server.MapPath( "~" );
            if( dir.IndexOf( app_path ) == -1 )
              path = dir + app_path + "\\" + drawing_name;
            else
              path = dir + "\\" + drawing_name;

            viewport = LoadDrawing( path );
            viewport.SetImageSize( width, height );
            viewport.SetupHierarchy();    // Setup to prepare to receive data

            List<GlgTagRecord> tag_list = CreateTagRecords( viewport );
            drawing = new DrawingData( drawing_name, viewport, tag_list );
            StoreDrawing( drawing_name, drawing );

         }
         else   // Already loaded, reuse the drawing.
         {
            viewport = drawing.viewport;
            viewport.SetImageSize( width, height );
         }

         UpdateDrawing( drawing );  // Update drawing with data.
             
         // Setup after data update to prepare to generate image.
         viewport.SetupHierarchy();

         // Main action: Generate Image.
         if( action.Equals( "GetImage" ) )
         {
            request_data.image = viewport.CreateImage( null );
         }
         // Secondary action: ProcessEvent.
         else if( action.Equals( "ProcessEvent" ) )
         {
            String selection_info = null;
            
            String event_type = GetStringParameter( request, "event_type", "" );

            GlgSelectionEventType selection_type;
            if( event_type.Equals( "MouseClick" ) )      // Get selected object
            {
               // Find object with the MouseClick custom event.
            selection_type = GlgSelectionEventType.CLICK_SELECTION;
            }
            else if( event_type.Equals( "Tooltip" ) )    // Get object's tooltip
            {
               // Find object with the TooltipString property.
               selection_type = GlgSelectionEventType.TOOLTIP_SELECTION;
            }
            else
            {
               selection_type = 0;
               selection_info = "Unsupported event_type";
            }
            
            if( selection_type != 0 )
            {
               // Get x and y coordinates of the mouse click.
               int x = GetIntegerParameter( request, "x", -1 );
               int y = GetIntegerParameter( request, "y", -1 );
               
               // Selection rectangle around the mouse click.
               GlgCube click_box = new GlgCube();
               int selection_sensitivity = 3;   // in pixels
               click_box.p1.x = x - selection_sensitivity;
               click_box.p1.y = y - selection_sensitivity;
               click_box.p2.x = x + selection_sensitivity;
               click_box.p2.y = y + selection_sensitivity;
               
               // Find selected object with MouseClick custom event attached.
               if( x > 0 && y > 0 )
               {
                  // Select using MouseClick custom events.
                  GlgObject selection_message = null;
                  selection_message =
                    GlgObject.CreateSelectionMessage( viewport, 
                                                      click_box, viewport, 
                                                      selection_type, 1 );
               
                  if( selection_message != null )
                    switch( selection_type )
                    {
                     default:
                     case GlgSelectionEventType.CLICK_SELECTION:
                       // Return object name.
                       String label = 
                         selection_message.GetSResource( "EventLabel" );
                       if( label != null && label.Equals( "PopupDialog" ) )
                       {
                          String tag_path =
                            selection_message.GetSResource( "ActionObject/TagPath" );
                          selection_info = 
                            selection_message.GetSResource( "Object/" + tag_path +
                                                            "/TagSource" );
                       }
                       break;
                       
                     case GlgSelectionEventType.TOOLTIP_SELECTION:
                       /* Return tooltip string, which is an event label
                          of the tooltip action message.
                       */
                       selection_info = 
                         selection_message.GetSResource( "EventLabel" );
                       break;
                    }
               }
               else
                 selection_info = "Invalid x/y coordinates.";
            }
            
            request_data.html_response = 
              ( selection_info == null ? "None" : selection_info );
         }
         else
           Error( "Unsupported action!" );
      }

      /////////////////////////////////////////////////////////////////
      // Helper methods
      /////////////////////////////////////////////////////////////////
      
      /////////////////////////////////////////////////////////////////
      int GetIntegerParameter( HttpRequest request, String name, 
                               int default_value )
      {
         String parameter_string = request.QueryString[ name ];
         if( parameter_string == null || parameter_string.Equals( "" ) )
           return default_value;
         
         try
         {
            return int.Parse( parameter_string, CultureInfo.InvariantCulture );
         }
         catch( Exception )
         {
            Error( "Invalid parameter value for: " + name + 
                   " = " + parameter_string );
            return default_value;
         }
      }

      /////////////////////////////////////////////////////////////////
      String GetStringParameter( HttpRequest request, String name, 
                                 String default_value )
      {
         String parameter_string = request.QueryString[ name ];
         if( parameter_string == null )
           return default_value;
         else
           return parameter_string;
      }
      
      /////////////////////////////////////////////////////////////////
      // Can be used only in ProcessRequestData() or methods 
      // originating from it.
      /////////////////////////////////////////////////////////////////
      public void Error( String message )
      {
         GlgObject.Error( GlgErrorType.USER_ERROR, message, null );
      }
      
      /////////////////////////////////////////////////////////////////
      DrawingData GetDrawing( String drawing_name )
      {
         if( DrawingArray == null )
           return null;
         
         int size = DrawingArray.GetSize();
         for( int i=0; i<size; ++i )
         {
            DrawingData drawing = (DrawingData) DrawingArray.GetElement( i );
            if( drawing_name.Equals( drawing.drawing_name ) )
            {
               /* Found an already loaded drawing.
                  Reorder the drawing to the bottom of DrawingArray to indicate 
                  it is the most recent.
               */
               if( drawing != (DrawingData) DrawingArray.GetElement( size - 1 ) )
               {
                  DrawingArray.DeleteObject( drawing );
                  DrawingArray.AddObjectToBottom( drawing );
               }
               return drawing;
            }
         }
         return null;   // Not found.
      }

      /////////////////////////////////////////////////////////////////
      void StoreDrawing( String drawing_name, DrawingData drawing )
      {
         drawing.drawing_name = drawing_name;
         
         if( DrawingArray == null )
           DrawingArray = 
             new GlgDynArray( GlgContainerType.NATIVE_OBJECT, 0, 0 );
         
         // Free space if needed. 
         if( DrawingArray.GetSize() > MAX_NUM_DRAWINGS )
         {
            DrawingData old_drawing = (DrawingData) DrawingArray.GetElement( 0 );
            old_drawing.viewport.ResetHierarchy();
            DrawingArray.DeleteTopObject();
         }
         
         DrawingArray.AddObjectToBottom( drawing );
      }
 
      /////////////////////////////////////////////////////////////////
      GlgObject LoadDrawing( String drawing_path )
      {
         GlgObject drawing;
         
         drawing = GlgObject.LoadWidget( drawing_path, GlgMediumType.FILE );
         if( drawing == null )
         {
            Error( "Can't load drawing: " + drawing_path );
            return null;
         }

         // Disable drawing border in the image: let html define it if needed.
         drawing.SetDResource( "LineWidth", 0.0 );

         return drawing;
      }

      /////////////////////////////////////////////////////////////////////
      // Create and populate TagRecordArray
      /////////////////////////////////////////////////////////////////////
      public List<GlgTagRecord> CreateTagRecords( GlgObject viewport )
      {
         GlgObject tag_obj;
         String tag_source;
#pragma warning disable 0219
         String tag_name;      // Show an example of how to get tag name.
#pragma warning restore 0219
         String tag_comment;
         GlgTagAccessType tag_access_type;
         GlgObject tag_list;

         /* Retrieve a tag list from the drawing. Include tags with unique
            tag sources.
         */
         tag_list = viewport.CreateTagList( /*unique tag sources*/ true );
         if( tag_list == null )
           return null;
         
         int size = tag_list.GetSize();
         if( size == 0 )
           return null; // no tags found 

         /* Create an array of tag records by traversing the tag list
            and retrieving information from each tag object
            in the list.
         */
         List<GlgTagRecord> tag_records = new List<GlgTagRecord>();
         
         for( int i=0; i<size; ++i )
         {
            tag_obj = (GlgObject) tag_list.GetElement( i );
            tag_source = tag_obj.GetSResource( "TagSource" );
            tag_name = tag_obj.GetSResource( "TagName" );
            tag_comment = tag_obj.GetSResource( "TagComment" );
            
            // Skip undefined tags.
            if( tag_source == null || tag_source.Length == 0 || 
                tag_source.Equals("unset") )
              continue;
            
            tag_access_type = (GlgTagAccessType) 
              tag_obj.GetDResource( "TagAccessType" ).IntValue();
         
            // Handle special tags according to their tag access type.
            switch( tag_access_type )
            {
             case GlgTagAccessType.OUTPUT_TAG: continue;   // Skip OUTPUT tags.
            
             case GlgTagAccessType.INIT_ONLY_TAG:
               /* Initialize INIT_ONLY tags; do not include them in tag_records, 
                  so that they will not be subject to contineous data animation.
               */
               InitTag( viewport, tag_source );
               continue;
          
             default: break;
            }
            
            // Tag source is valid, add a new tag record to tag_records.
            GlgTagRecord tag_record = new GlgTagRecord();
            tag_record.tag_obj = tag_obj;
            tag_record.tag_source = tag_source;
            tag_record.data_type = (GlgDataType)
              tag_obj.GetDResource( "DataType" ).IntValue();
            
            /* For further performance optimization, set if_changed=true which 
               will push the value into the tag only if the value has changed. 
               Set if_changed = false for the tags assigned to the entry 
               points of a chart object.
            */
            if( tag_comment != null && tag_comment.Contains( "Chart" ) )
              tag_record.if_changed = false;
            else
              tag_record.if_changed = true;      
            
            // Add a valid tag record to the list.
            tag_records.Add( tag_record );
         }

         return tag_records;
      }
      
      //////////////////////////////////////////////////////////////////////////
      // Initialize tag with a given tag source.
      //////////////////////////////////////////////////////////////////////////
      public void InitTag( GlgObject viewport, String tag_source )
      {
         double value = -1.0;
         
         if( RANDOM_DATA )
         {
            // Initialize "State" tag.
            if( tag_source.Equals( "State" ) )
              value = 1.0;
         }
         else
         {
            // Place custom code here to set value as needed.
         }
         
         // Set the tag value in the drawing.
         viewport.SetDTag( tag_source, value, false );
      }

      //////////////////////////////////////////////////////////////////////////
      // Update the drawing with new dynamic data values.
      //////////////////////////////////////////////////////////////////////////
      void UpdateDrawing( DrawingData drawing )
      {
         /* For each tag in the tag_records, obtain a new data value using 
            DataFeed object and push a new value into the graphics.  
         */
         GlgObject viewport = drawing.viewport;
         for( int i = 0; i<drawing.num_tags; ++i )
         {
            GlgTagRecord tag_record = drawing.tag_records[i];
            switch( tag_record.data_type )
            {
             case GlgDataType.D:
               if( !DataFeed.ReadDValue( tag_record ) )
               {
                  Error( "Failed to read data value for " + 
                         tag_record.tag_source );
                  continue;
               }
               
               // Push new data value into the graphics.
               viewport.SetDTag( tag_record.tag_source,  tag_record.d_value, 
                                 tag_record.if_changed );
               break;
               
             case GlgDataType.S:
               if( !DataFeed.ReadSValue( tag_record ) )
               {
                  Error( "Failed to read data value for " + 
                         tag_record.tag_source );
                  continue;
               }
               
               // Push new data value into the graphics.
               viewport.SetSTag( tag_record.tag_source, tag_record.s_value, 
                                 tag_record.if_changed );
               break;
               
             case GlgDataType.G:      // Not used in this example.
             default:
               break;
            }
         }
      }
      
      /////////////////////////////////////////////////////////////////
      // Returns data for a requested dialog.
      /////////////////////////////////////////////////////////////////
      void ProcessDialogData( GlgHttpRequestData request_data )
      {
         HttpRequest request = request_data.context.Request;

         String tag_source = GetStringParameter( request, "dialog_type", null );

 /*
         // This is an example of a response that provides dialog data for 
         // the selected object.
         if( dialog_type.Equals( "Heater" ) )
         {
            request_data.html_response =
               "<b>Solvent Heater</b><br>" +
               "Level: " + Format( data.HeaterLevel * 100. ) + " %<br>" +
               "Pressure: " + Format( data.HeaterPressure * 5. ) + " ATM.<br>" +
               "Temperature: " + Format( 50. + data.HeaterTemperature * 100. )
               + " C\u00B0" );
            return;
         }
*/
         if( tag_source == null )
         {
            request_data.html_response = "None";
            return;
         }

         tag_record.tag_source = tag_source;
         tag_record.data_type = GlgDataType.D;

         if( !DataFeed.ReadDValue( tag_record ) )
         {
            Error( "Failed to read data value for " + tag_record.tag_source );

            request_data.html_response = "None";
            return;
         }

         request_data.html_response = 
           "<b>" + tag_source + "</b><br>" +
           "Value: " + GlgObject.Printf( "%.1f", tag_record.d_value );
      }

      /////////////////////////////////////////////////////////////////
      String Format( double value )
      {
         return GlgObject.Printf( "%.2f", value );
      }
   }
}
